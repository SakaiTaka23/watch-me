openapi: 3.1.0
info:
  title: watch-me
  version: '1.0'
  summary: インフルエンサーが告知をするプラットフォーム
  description: |-
    バックエンドgo
    フロントエンドnextで通信を行う際のapi
servers:
  - url: 'http://localhost:8000'
paths:
  '/users/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              examples: {}
        '404':
          description: User Not Found
      operationId: get-users-username
      description: |-
        ユーザーネームからユーザーの情報＋スケジュールを返す
        スケジュールに関してはその月のもののみ返す
      parameters: []
    patch:
      summary: Update User Information
      operationId: patch-users-username
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: ユーザーの情報を更新
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              x-examples:
                example-1:
                  name: string
                  schedule_title: string
              anyOf:
                - properties:
                    name:
                      type: string
                      minLength: 1
                    schedule_title:
                      type: string
                      minLength: 1
              type: object
            examples:
              change name:
                value:
                  name: string
              change title:
                value:
                  schedule_title: string
              change both:
                value:
                  name: string
                  schedule_title: string
        description: Patch user properties to update.
      parameters: []
      security:
        - Firebase: []
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                id:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
              required:
                - id
                - name
                - email
              x-examples:
                example-1:
                  id: string
                  name: string
                  email: string
            examples: {}
        description: Post the necessary fields for the API to create a new user.
      description: ユーザーを新規登録
      parameters: []
      security:
        - Firebase: []
  /schedule:
    post:
      summary: post-schedule-create
      tags:
        - schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    id: string
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: 作成したスケジュールのidを返す
                required:
                  - id
      operationId: post-schedule
      description: 情報を元にスケジュールを新規作成する
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/schedule.yaml
      security:
        - Firebase: []
    delete:
      summary: ''
      operationId: delete-schedule
      responses:
        '200':
          description: OK
      description: |-
        スケジュールを削除する

        現時点では完全削除だが削除後に削除フラグを立てて赤く表示でも良いかも
      parameters:
        - schema:
            type: string
          in: header
          name: bearer
          description: firebase auth jwt
      security:
        - Firebase: []
components:
  schemas:
    UserInfo:
      description: ''
      type: object
      x-examples:
        example-1:
          name: string
          schedule_title: string
          sns: array
      examples:
        - name: string
          schedule_title: string
          sns:
            - string
      properties:
        name:
          type: string
          minLength: 1
        schedule_title:
          type: string
          minLength: 1
        sns:
          type: array
          items:
            type: string
        schedule:
          $ref: '#/components/schemas/SimpleSchedule'
      required:
        - name
        - schedule_title
        - sns
    SimpleSchedule:
      description: ''
      type: object
      properties:
        title:
          type: string
          minLength: 1
        about:
          type: string
          minLength: 1
        date:
          type: string
          minLength: 1
        start_time:
          type: string
          minLength: 1
        end_time:
          type: string
          minLength: 1
      required:
        - title
        - about
        - date
        - start_time
        - end_time
      x-examples:
        example-1:
          title: string
          about: string
          date: string
          start_time: string
          end_time: string
  securitySchemes:
    Firebase:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
      description: ''
security:
  - Firebase: []
