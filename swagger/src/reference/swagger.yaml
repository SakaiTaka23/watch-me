openapi: 3.1.0
info:
  title: watch-me
  version: '1.0'
  summary: インフルエンサーが告知をするプラットフォーム
  description: |-
    バックエンドgo
    フロントエンドnextで通信を行う際のapi
servers:
  - url: 'http://localhost:8000'
paths:
  /schedule:
    post:
      summary: post-schedule-create
      tags:
        - schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    id: string
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: 作成したスケジュールのidを返す
                required:
                  - id
              examples:
                example-1:
                  value:
                    id: string
      operationId: post-schedule
      description: 情報を元にスケジュールを新規作成する
      parameters: []
      security:
        - Firebase: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  about: string
                  emoji: string
                  date: '2019-08-24'
                  start_date: '14:15:22Z'
                  end_date: '14:15:22Z'
                  place: string
                  title: string
                  url: 'http://example.com'
              properties:
                about:
                  type: string
                  minLength: 1
                emoji:
                  type: string
                  minLength: 1
                date:
                  type: string
                  minLength: 1
                start_date:
                  type: string
                  minLength: 1
                end_date:
                  type: string
                  minLength: 1
                place:
                  type: string
                  minLength: 1
                title:
                  type: string
                  minLength: 1
                url:
                  type: string
                  minLength: 1
              required:
                - date
                - start_date
                - title
            examples:
              example-1:
                value:
                  about: string
                  emoji: string
                  date: '2019-08-24'
                  start_date: '14:15:22Z'
                  end_date: '14:15:22Z'
                  place: string
                  title: string
                  url: 'http://example.com'
        description: idを除いたスケジュールモデルを想定
    delete:
      summary: delete-schedule
      operationId: delete-schedule
      responses:
        '200':
          description: OK
      description: |-
        スケジュールを削除する

        現時点では完全削除だが削除後に削除フラグを立てて赤く表示でも良いかも
      parameters:
        - schema:
            type: string
          in: header
          name: bearer
          description: firebase auth jwt
      security:
        - Firebase: []
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                id:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
              required:
                - id
                - name
                - email
              x-examples:
                example-1:
                  id: string
                  name: string
                  email: string
            examples: {}
        description: Post the necessary fields for the API to create a new user.
      description: ユーザーを新規登録
      parameters: []
      security:
        - Firebase: []
  '/user/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/UserInfo'
        '404':
          description: Not Found
      operationId: get-users-username
      description: |-
        ユーザーネームからスケジュールを返す
        スケジュールに関してはクエリで指定された年・月のもののみ返す
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/month'
    patch:
      summary: Update User Information
      operationId: patch-users-username
      responses:
        '200':
          $ref: '#/components/responses/UserUpdateResult'
        '401':
          description: Unauthorized
      description: ユーザーの情報を更新
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              x-examples:
                example-1:
                  name: string
                  schedule_title: string
              anyOf:
                - properties:
                    name:
                      type: string
                      minLength: 1
                    schedule_title:
                      type: string
                      minLength: 1
              type: object
            examples:
              change both:
                value:
                  name: string
                  schedule_title: string
              change name:
                value:
                  name: changed name
                  schedule_title: default value
        description: |-
          ユーザーを更新する
          一方の更新・両方の更新どちらも可能であるがどちらの場合でもあっても全ての要素を送信する
      parameters: []
      security:
        - Firebase: []
  '/user/{username}/info':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: user get info
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/UserInfoSimple'
        '404':
          description: Not Found
      operationId: get-user-username-info
      description: そのユーザーに関する基本的な情報を返す
components:
  schemas:
    User:
      description: ユーザー情報
      type: object
      x-examples:
        example-1:
          id: string
          name: string
          schedule_title: string
          email: string
      properties:
        id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        schedule_title:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
          format: email
      required:
        - id
        - name
        - schedule_title
        - email
      examples:
        - id: string
          name: string
          schedule_title: string
          email: user@example.com
    SNS:
      description: snsの情報
      type: object
      x-examples:
        example-1:
          id: string
          url: string
      properties:
        id:
          type: string
          minLength: 1
        url:
          type: string
          minLength: 1
          format: uri
      required:
        - id
        - url
      examples:
        - id: string
          url: 'http://example.com'
    Schedule:
      description: スケジュールに関する情報
      type: object
      x-examples:
        example-1:
          id: string
          about: string
          emoji: string
          date: string
          start_date: string
          end_date: string
          place: string
          title: string
          url: string
      examples:
        - id: string
          about: string
          emoji: string
          date: '2019-08-24'
          start_date: '14:15:22Z'
          end_date: '14:15:22Z'
          place: string
          title: string
          url: 'http://example.com'
        - id: string
          date: '2019-08-24'
          start_date: '14:15:22Z'
          title: string
      properties:
        id:
          type: string
          minLength: 1
        about:
          type: string
          minLength: 1
        emoji:
          type: string
          minLength: 1
        date:
          type: string
          minLength: 1
          format: date
        start_date:
          type: string
          minLength: 1
          format: time
        end_date:
          type: string
          minLength: 1
          format: time
        place:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        url:
          type: string
          minLength: 1
          format: uri
      required:
        - id
        - emoji
        - date
        - start_date
        - title
  securitySchemes:
    Firebase:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
      description: ''
  responses:
    UserUpdateResult:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                id: string
                name: string
                mail: string
                title: string
            properties:
              id:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
              schedule_title:
                type: string
                minLength: 1
              sns:
                type: array
                items:
                  type: string
            required:
              - id
              - name
              - schedule_title
    UserInfo:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                name: string
                schedule_title: string
                sns:
                  - string
                schedule:
                  - title: string
                    about: string
                    date: string
                    start_time: string
                    end_time: string
            properties:
              name:
                type: string
                minLength: 1
              schedule_title:
                type: string
                minLength: 1
              sns:
                type: array
                items:
                  type: string
                  format: uri
            required:
              - name
              - schedule_title
          examples:
            example-1:
              value:
                name: string
                schedule_title: string
                sns:
                  - 'http://example.com'
    UserInfoSimple:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                name: string
                schedule_title: string
                sns:
                  - {}
            properties:
              name:
                type: string
                minLength: 1
              schedule_title:
                type: string
                minLength: 1
              sns:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  type: string
            required:
              - name
              - schedule_title
              - sns
  parameters:
    page:
      name: year
      in: query
      schema:
        type: string
      description: 検索したい年
      required: true
    month:
      name: month
      in: query
      required: true
      schema:
        type: string
      description: 検索したい月
security:
  - Firebase: []
