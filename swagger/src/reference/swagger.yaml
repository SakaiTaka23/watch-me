openapi: 3.1.0
info:
  title: watch-me
  version: '1.0'
  summary: インフルエンサーが告知をするプラットフォーム
  description: |-
    バックエンドgo
    フロントエンドnextで通信を行う際のapi
  contact:
    name: github
    url: SakaiTaka23
servers:
  - url: 'http://localhost:8000'
paths:
  /schedule:
    post:
      summary: post-schedule-create
      tags:
        - schedule
      responses:
        '200':
          description: 作成したスケジュールのidを返す
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    id: string
                properties:
                  id:
                    description: 作成したスケジュールのidを返す
                    type: string
                required:
                  - id
              examples:
                example-1:
                  value:
                    id: string-uid
        '401':
          description: Unauthorized
      operationId: create-schedule
      description: 情報を元にスケジュールを新規作成する
      parameters: []
      security:
        - Firebase: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  about: string
                  emoji: string
                  date: '2019-08-24'
                  start_time: '14:15:22Z'
                  end_time: '14:15:22Z'
                  place: string
                  title: string
                  url: 'http://example.com'
              properties:
                about:
                  type: string
                  minLength: 1
                  maxLength: 250
                emoji:
                  type: string
                  minLength: 1
                  maxLength: 20
                year:
                  type: number
                  minimum: 2021
                  maximum: 2025
                month:
                  type: number
                  minimum: 1
                  maximum: 12
                day:
                  type: number
                  minimum: 1
                  maximum: 31
                start_time:
                  type: string
                  example: '11:00'
                  pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
                end_time:
                  type: string
                  pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
                  example: '15:00'
                place:
                  type: string
                  minLength: 1
                  maxLength: 50
                title:
                  type: string
                  minLength: 1
                  maxLength: 20
                url:
                  type: string
                  minLength: 1
                  format: uri
              required:
                - emoji
                - year
                - month
                - day
                - start_time
                - title
            examples:
              全ての要素がある場合:
                value:
                  about: string
                  emoji: string
                  year: 2021
                  month: 8
                  day: 20
                  start_time: '14:15'
                  end_time: '14:15'
                  place: string
                  title: string
                  url: 'http://example.com'
              最低限の要素のみの場合:
                value:
                  emoji: string
                  year: 2021
                  month: 8
                  day: 20
                  start_time: '14:15'
                  title: string
        description: |-
          idを除いたスケジュールモデルを想定
          idはバックエンドで生成
          emojiに関しては作成時のフォームでは必須にはしない。埋められていない場合はフロントエンド側でランダムに一つ決めて送信する
  '/schedule/{schedule}':
    parameters:
      - schema:
          type: string
        name: schedule
        in: path
        required: true
    delete:
      summary: delete schedule
      tags:
        - schedule
      responses:
        '200':
          description: 削除完了
        '401':
          description: Unauthorized
      operationId: delete-schedule-schedule
      description: スケジュールを消す
      security:
        - Firebase: []
      parameters:
        - schema:
            type: string
          in: header
          name: bearer
          description: firebase auth jwt
    get:
      summary: get schedule info
      operationId: get-schedule-schedule
      responses:
        '200':
          description: スケジュールモデル
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
              examples:
                example-1:
                  value:
                    id: string
                    about: string
                    emoji: string
                    year: 2021
                    month: 1
                    day: 1
                    start_time: '11:00'
                    end_time: '17:00'
                    place: string
                    title: string
                    url: 'http://example.com'
        '404':
          description: Not Found
      description: スケジュールの情報を取得する
      tags:
        - schedule
      security: []
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  id: string
                  name: string
                  email: string
              properties:
                id:
                  type: string
                  minLength: 1
                  format: uuid
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                  format: email
              required:
                - id
                - name
                - email
            examples:
              example-1:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  name: string
                  email: user@example.com
        description: firebaseより得た要素を入れる
      description: ユーザーを新規登録
      parameters: []
      security:
        - Firebase: []
      tags:
        - user
    patch:
      summary: update user
      operationId: patch-user-update
      responses:
        '200':
          $ref: '#/components/responses/UserUpdateResult'
        '401':
          description: Unauthorized
      description: ユーザーのスケジュールタイトル・名前の更新を行う
      security:
        - Firebase: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  name: string
                  schedule_title: string
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 10
                schedule_title:
                  type: string
                  minLength: 1
                  maxLength: 20
              required:
                - name
                - schedule_title
            examples:
              両方変更:
                value:
                  name: string
                  schedule_title: string
              名前のみを変更:
                value:
                  name: string
                  schedule_title: default value
        description: 両方を更新する場合片方を更新する場合どちらであっても両方の情報を送信する
      tags:
        - user
        - sns
  '/user/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Get User Schedule by User ID
      tags:
        - user
        - schedule
      responses:
        '200':
          $ref: '#/components/responses/UserSchedule'
        '404':
          description: Not Found
      operationId: get-user-username
      description: |-
        ユーザーネームからスケジュールを返す
        スケジュールに関してはクエリで指定された年・月のもののみ返す
      parameters:
        - $ref: '#/components/parameters/year'
        - $ref: '#/components/parameters/month'
      security: []
  '/user/{username}/info':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: user get info
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/UserInfoSimple'
        '404':
          description: Not Found
      operationId: get-user-username-info
      description: そのユーザーに関する基本的な情報を返す
      security: []
components:
  schemas:
    Schedule:
      description: スケジュールに関する情報
      type: object
      x-examples:
        example-1:
          id: string
          about: string
          emoji: string
          date: string
          start_date: string
          end_date: string
          place: string
          title: string
          url: string
      examples:
        - id: string
          about: string
          emoji: string
          year: 2021
          month: 1
          day: 1
          start_time: '11:00'
          end_time: '17:00'
          place: string
          title: string
          url: 'http://example.com'
      x-tags:
        - schedule
      x-internal: false
      properties:
        id:
          type: string
        about:
          type: string
          minLength: 1
        emoji:
          type: string
          minLength: 1
        year:
          type: number
          minimum: 2021
          maximum: 2025
        month:
          type: number
          minimum: 1
          maximum: 12
        day:
          type: number
          minimum: 1
          maximum: 31
        start_time:
          type: string
          minLength: 1
          pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
          example: '11:00'
        end_time:
          type: string
          minLength: 1
          pattern: '^([01][0-9]|2[0-3]):[0-5][0-9]$'
          example: '17:00'
        place:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
          maxLength: 20
        url:
          type: string
          minLength: 1
          format: uri
      required:
        - emoji
        - year
        - month
        - day
        - start_time
        - title
    SNS:
      description: snsの情報
      type: object
      x-examples:
        example-1:
          id: string
          url: string
      examples:
        - id: '1'
          url: 'http://example.com'
      x-tags:
        - sns
      properties:
        id:
          type: string
        url:
          type: string
          minLength: 1
          format: uri
      required:
        - id
        - url
    User:
      description: ユーザー情報
      type: object
      x-examples:
        example-1:
          id: string
          name: string
          schedule_title: string
          email: string
      properties:
        id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        schedule_title:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
          format: email
      required:
        - id
        - name
        - schedule_title
        - email
      examples:
        - id: string
          name: string
          schedule_title: string
          email: user@example.com
      x-tags:
        - user
  securitySchemes:
    Firebase:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
      description: ''
  responses:
    UserUpdateResult:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                id: string
                name: string
                mail: string
                title: string
            properties:
              id:
                type: string
                minLength: 1
              name:
                type: string
                minLength: 1
              schedule_title:
                type: string
                minLength: 1
              sns:
                type: array
                items:
                  $ref: '#/components/schemas/SNS'
            required:
              - id
              - name
              - schedule_title
          examples:
            example-1:
              value:
                id: string
                name: string
                schedule_title: string
                sns:
                  - id: '1'
                    url: 'http://example.com'
    UserInfoSimple:
      description: Example response
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                name: string
                schedule_title: string
                sns:
                  - {}
            properties:
              name:
                type: string
                minLength: 1
              schedule_title:
                type: string
                minLength: 1
              sns:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  $ref: '#/components/schemas/SNS'
            required:
              - name
              - schedule_title
    UserSchedule:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Schedule'
          examples:
            example-1:
              value:
                - id: string
                  about: string
                  emoji: string
                  year: 2021
                  month: 1
                  day: 1
                  start_time: '11:00'
                  end_time: '17:00'
                  place: string
                  title: string
                  url: 'http://example.com'
  parameters:
    year:
      name: year
      in: query
      schema:
        type: string
        minLength: 2021
        maxLength: 2025
      description: 検索したい年
      required: true
    month:
      name: month
      in: query
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 12
      description: 検索したい月
security:
  - Firebase: []
tags:
  - name: schedule
  - name: sns
  - name: user
